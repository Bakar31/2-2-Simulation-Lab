
Exp05 Part 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000154  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000069b  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005bb  00000000  00000000  000008d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000306  00000000  00000000  00000e92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001198  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032a  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c7  00000000  00000000  000014f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000016bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
   4:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
   8:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
   c:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  10:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  14:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  18:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  1c:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  20:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  24:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  28:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  2c:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  30:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  34:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  38:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  3c:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  40:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  44:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  48:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  4c:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  50:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  54:	52 00       	.word	0x0052	; ????
  56:	56 00       	.word	0x0056	; ????
  58:	5a 00       	.word	0x005a	; ????
  5a:	5e 00       	.word	0x005e	; ????
  5c:	62 00       	.word	0x0062	; ????
  5e:	66 00       	.word	0x0066	; ????
  60:	6a 00       	.word	0x006a	; ????
  62:	6e 00       	.word	0x006e	; ????
  64:	72 00       	.word	0x0072	; ????

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d8 e0       	ldi	r29, 0x08	; 8
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61
  72:	0e 94 76 00 	call	0xec	; 0xec <main>
  76:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

0000007a <__bad_interrupt>:
  7a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007e <DisplayDigit>:
	}

	return 0;
}

static void DisplayDigit(uint8_t num) {
  7e:	e8 2f       	mov	r30, r24

	PORTC &= 0x80; // Clear only bits (PC6:PC0)
  80:	85 b3       	in	r24, 0x15	; 21
  82:	80 78       	andi	r24, 0x80	; 128
  84:	85 bb       	out	0x15, r24	; 21
	switch (num)
  86:	8e 2f       	mov	r24, r30
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	fc 01       	movw	r30, r24
  8c:	31 97       	sbiw	r30, 0x01	; 1
  8e:	e9 30       	cpi	r30, 0x09	; 9
  90:	f1 05       	cpc	r31, r1
  92:	20 f4       	brcc	.+8      	; 0x9c <DisplayDigit+0x1e>
  94:	e6 5d       	subi	r30, 0xD6	; 214
  96:	ff 4f       	sbci	r31, 0xFF	; 255
  98:	0c 94 a2 00 	jmp	0x144	; 0x144 <__tablejump2__>
	{
	// Print 0 on 7-segment if num = 0 or num > 9
		default:

		case 0:
		PORTC |= 0x3F; // show 0
  9c:	85 b3       	in	r24, 0x15	; 21
  9e:	8f 63       	ori	r24, 0x3F	; 63
  a0:	85 bb       	out	0x15, r24	; 21
		break;
  a2:	08 95       	ret

		case 1:
		PORTC |= 0x06; // show 1
  a4:	85 b3       	in	r24, 0x15	; 21
  a6:	86 60       	ori	r24, 0x06	; 6
  a8:	85 bb       	out	0x15, r24	; 21
		break;
  aa:	08 95       	ret

		case 2:
		PORTC |= 0x5B; // show 2
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	8b 65       	ori	r24, 0x5B	; 91
  b0:	85 bb       	out	0x15, r24	; 21
		break;
  b2:	08 95       	ret

		case 3:
		PORTC |= 0x4F; // show 3
  b4:	85 b3       	in	r24, 0x15	; 21
  b6:	8f 64       	ori	r24, 0x4F	; 79
  b8:	85 bb       	out	0x15, r24	; 21
		break;
  ba:	08 95       	ret

		case 4:
		PORTC |= 0x66; // show 4
  bc:	85 b3       	in	r24, 0x15	; 21
  be:	86 66       	ori	r24, 0x66	; 102
  c0:	85 bb       	out	0x15, r24	; 21
		break;
  c2:	08 95       	ret

		case 5:
		PORTC |= 0x6D; // show 5
  c4:	85 b3       	in	r24, 0x15	; 21
  c6:	8d 66       	ori	r24, 0x6D	; 109
  c8:	85 bb       	out	0x15, r24	; 21
		break;
  ca:	08 95       	ret

		case 6:
		PORTC |= 0x7D; // show 6
  cc:	85 b3       	in	r24, 0x15	; 21
  ce:	8d 67       	ori	r24, 0x7D	; 125
  d0:	85 bb       	out	0x15, r24	; 21
		break;
  d2:	08 95       	ret

		case 7:
		PORTC |= 0x07; // show 7
  d4:	85 b3       	in	r24, 0x15	; 21
  d6:	87 60       	ori	r24, 0x07	; 7
  d8:	85 bb       	out	0x15, r24	; 21
		break;
  da:	08 95       	ret

		case 8:
		PORTC |= 0x7F; // show 8
  dc:	85 b3       	in	r24, 0x15	; 21
  de:	8f 67       	ori	r24, 0x7F	; 127
  e0:	85 bb       	out	0x15, r24	; 21
		break;
  e2:	08 95       	ret

		case 9:
		PORTC |= 0x6F; // show 9
  e4:	85 b3       	in	r24, 0x15	; 21
  e6:	8f 66       	ori	r24, 0x6F	; 111
  e8:	85 bb       	out	0x15, r24	; 21
  ea:	08 95       	ret

000000ec <main>:

static void DisplayDigit(uint8_t num); //Function Prototype


int main(void) {
	DDRC = 0xFF; // PORTC as Output
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	84 bb       	out	0x14, r24	; 20
	DDRD &= ~(1<<PD0); // First pin of PORTD as Input
  f0:	81 b3       	in	r24, 0x11	; 17
  f2:	8e 7f       	andi	r24, 0xFE	; 254
  f4:	81 bb       	out	0x11, r24	; 17

	uint8_t count = 0; 	// Variable that counts the Input
	DisplayDigit(count); // Show Initial count value (0) on Display
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 3f 00 	call	0x7e	; 0x7e <DisplayDigit>

int main(void) {
	DDRC = 0xFF; // PORTC as Output
	DDRD &= ~(1<<PD0); // First pin of PORTD as Input

	uint8_t count = 0; 	// Variable that counts the Input
  fc:	c0 e0       	ldi	r28, 0x00	; 0
	DisplayDigit(count); // Show Initial count value (0) on Display

	while (1) {

		if( (PIND & 0x01) == 0 ) // Check if switch is pressed
  fe:	80 99       	sbic	0x10, 0	; 16
 100:	0f c0       	rjmp	.+30     	; 0x120 <main+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	83 ef       	ldi	r24, 0xF3	; 243
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x1c>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x26>
 112:	00 00       	nop
		{
			_delay_ms(80); // delay for 80 s

			if (count < 9 ) // Check if count value is less than MAX value (9)
 114:	c9 30       	cpi	r28, 0x09	; 9
 116:	98 f7       	brcc	.-26     	; 0xfe <main+0x12>
			{
				count++; // If true increment the count value
 118:	cf 5f       	subi	r28, 0xFF	; 255
			else
			{
				continue; // Otherwise continue
			}

		DisplayDigit(count); // Show the count value on Display
 11a:	8c 2f       	mov	r24, r28
 11c:	0e 94 3f 00 	call	0x7e	; 0x7e <DisplayDigit>
		}
		
		if( (PIND & 0x02) == 0 ) 
 120:	81 99       	sbic	0x10, 1	; 16
 122:	ed cf       	rjmp	.-38     	; 0xfe <main+0x12>
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	83 ef       	ldi	r24, 0xF3	; 243
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0x3e>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x48>
 134:	00 00       	nop
		{
			_delay_ms(80); // delay for 80 s
			
			if (count > 0 ) // Check if count value is greater than MIN value (0)
 136:	cc 23       	and	r28, r28
 138:	11 f3       	breq	.-60     	; 0xfe <main+0x12>
			{
				count--; // If true decrement the count value
 13a:	c1 50       	subi	r28, 0x01	; 1
			else
			{
				continue; // Otherwise continue
			}
			
			DisplayDigit(count); // Show the count value on Display
 13c:	8c 2f       	mov	r24, r28
 13e:	0e 94 3f 00 	call	0x7e	; 0x7e <DisplayDigit>
 142:	dd cf       	rjmp	.-70     	; 0xfe <main+0x12>

00000144 <__tablejump2__>:
 144:	ee 0f       	add	r30, r30
 146:	ff 1f       	adc	r31, r31
 148:	05 90       	lpm	r0, Z+
 14a:	f4 91       	lpm	r31, Z
 14c:	e0 2d       	mov	r30, r0
 14e:	09 94       	ijmp

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
