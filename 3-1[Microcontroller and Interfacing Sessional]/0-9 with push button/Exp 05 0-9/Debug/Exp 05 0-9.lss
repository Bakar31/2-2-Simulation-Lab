
Exp 05 0-9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000132  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000064e  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005bb  00000000  00000000  0000086a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e1  00000000  00000000  00000e25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001108  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000326  00000000  00000000  0000113c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017f  00000000  00000000  00001462  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000015e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
   4:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
   8:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
   c:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  10:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  14:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  18:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  1c:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  20:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  24:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  28:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  2c:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  30:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  34:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  38:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  3c:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  40:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  44:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  48:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  4c:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  50:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  54:	52 00       	.word	0x0052	; ????
  56:	56 00       	.word	0x0056	; ????
  58:	5a 00       	.word	0x005a	; ????
  5a:	5e 00       	.word	0x005e	; ????
  5c:	62 00       	.word	0x0062	; ????
  5e:	66 00       	.word	0x0066	; ????
  60:	6a 00       	.word	0x006a	; ????
  62:	6e 00       	.word	0x006e	; ????
  64:	72 00       	.word	0x0072	; ????

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d8 e0       	ldi	r29, 0x08	; 8
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61
  72:	0e 94 76 00 	call	0xec	; 0xec <main>
  76:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

0000007a <__bad_interrupt>:
  7a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007e <DisplayDigit>:
    }
	
	return 0;
}
 
static void DisplayDigit(uint8_t num) {
  7e:	e8 2f       	mov	r30, r24
	
	// Clear only bits (PB6:PB0)
	PORTC &= 0x80;
  80:	85 b3       	in	r24, 0x15	; 21
  82:	80 78       	andi	r24, 0x80	; 128
  84:	85 bb       	out	0x15, r24	; 21
	switch (num) {
  86:	8e 2f       	mov	r24, r30
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	fc 01       	movw	r30, r24
  8c:	31 97       	sbiw	r30, 0x01	; 1
  8e:	e9 30       	cpi	r30, 0x09	; 9
  90:	f1 05       	cpc	r31, r1
  92:	20 f4       	brcc	.+8      	; 0x9c <DisplayDigit+0x1e>
  94:	e6 5d       	subi	r30, 0xD6	; 214
  96:	ff 4f       	sbci	r31, 0xFF	; 255
  98:	0c 94 91 00 	jmp	0x122	; 0x122 <__tablejump2__>
		// Print 0 on 7-segment if num = 0 or num > 9
		default:
		case 0:
			PORTC |= 0x3F;
  9c:	85 b3       	in	r24, 0x15	; 21
  9e:	8f 63       	ori	r24, 0x3F	; 63
  a0:	85 bb       	out	0x15, r24	; 21
			break;
  a2:	08 95       	ret
		
		case 1:
			PORTC |= 0x06;
  a4:	85 b3       	in	r24, 0x15	; 21
  a6:	86 60       	ori	r24, 0x06	; 6
  a8:	85 bb       	out	0x15, r24	; 21
			break;
  aa:	08 95       	ret
			
		case 2:
			PORTC |= 0x5B;
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	8b 65       	ori	r24, 0x5B	; 91
  b0:	85 bb       	out	0x15, r24	; 21
			break;
  b2:	08 95       	ret
			
		case 3:
			PORTC |= 0x4F;
  b4:	85 b3       	in	r24, 0x15	; 21
  b6:	8f 64       	ori	r24, 0x4F	; 79
  b8:	85 bb       	out	0x15, r24	; 21
			break;
  ba:	08 95       	ret
			
		case 4:
			PORTC |= 0x66;
  bc:	85 b3       	in	r24, 0x15	; 21
  be:	86 66       	ori	r24, 0x66	; 102
  c0:	85 bb       	out	0x15, r24	; 21
			break;
  c2:	08 95       	ret
			
		case 5:
			PORTC |= 0x6D;
  c4:	85 b3       	in	r24, 0x15	; 21
  c6:	8d 66       	ori	r24, 0x6D	; 109
  c8:	85 bb       	out	0x15, r24	; 21
			break;
  ca:	08 95       	ret
		
		case 6:
			PORTC |= 0x7D;
  cc:	85 b3       	in	r24, 0x15	; 21
  ce:	8d 67       	ori	r24, 0x7D	; 125
  d0:	85 bb       	out	0x15, r24	; 21
			break;
  d2:	08 95       	ret
		
		case 7:
			PORTC |= 0x07;
  d4:	85 b3       	in	r24, 0x15	; 21
  d6:	87 60       	ori	r24, 0x07	; 7
  d8:	85 bb       	out	0x15, r24	; 21
			break;
  da:	08 95       	ret
		
		case 8:
			PORTC |= 0x7F;
  dc:	85 b3       	in	r24, 0x15	; 21
  de:	8f 67       	ori	r24, 0x7F	; 127
  e0:	85 bb       	out	0x15, r24	; 21
			break;
  e2:	08 95       	ret
		
		case 9:
			PORTC |= 0x6F;
  e4:	85 b3       	in	r24, 0x15	; 21
  e6:	8f 66       	ori	r24, 0x6F	; 111
  e8:	85 bb       	out	0x15, r24	; 21
  ea:	08 95       	ret

000000ec <main>:
static void DisplayDigit(uint8_t num); //Function Prototype


int main(void) {
	// PORTB (PB6:PB0) as GPIO Output
    DDRC = 0xFF;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	84 bb       	out	0x14, r24	; 20
	// PORTD (PD3:PD2) as GPIO Input with High-Z
	DDRD &= ~(1<<PD0); 
  f0:	81 b3       	in	r24, 0x11	; 17
  f2:	8e 7f       	andi	r24, 0xFE	; 254
  f4:	81 bb       	out	0x11, r24	; 17
	
	// Variable that counts the Input
	uint8_t count = 0;
	// Show Initial count value (0) on Display
	DisplayDigit(count);
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 3f 00 	call	0x7e	; 0x7e <DisplayDigit>
    DDRC = 0xFF;
	// PORTD (PD3:PD2) as GPIO Input with High-Z
	DDRD &= ~(1<<PD0); 
	
	// Variable that counts the Input
	uint8_t count = 0;
  fc:	c0 e0       	ldi	r28, 0x00	; 0
	DisplayDigit(count);
	
    while (1) {
		
		// Check if SW1 is pressed (Up Count)
		if( (PIND & 0x01) == 0 ) {
  fe:	80 99       	sbic	0x10, 0	; 16
 100:	fe cf       	rjmp	.-4      	; 0xfe <main+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	83 ef       	ldi	r24, 0xF3	; 243
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x1c>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x26>
 112:	00 00       	nop
			// Switch De-bounce delay of 250 ms
			_delay_ms(80);
			
			// Check if count value is less than MAX value (9)
			// If true increment the count value, otherwise continue
			if (count < 9 )
 114:	c9 30       	cpi	r28, 0x09	; 9
 116:	98 f7       	brcc	.-26     	; 0xfe <main+0x12>
				count++;
 118:	cf 5f       	subi	r28, 0xFF	; 255
			else
				continue; 
		
			// Show the count value on Display
			DisplayDigit(count);
 11a:	8c 2f       	mov	r24, r28
 11c:	0e 94 3f 00 	call	0x7e	; 0x7e <DisplayDigit>
 120:	ee cf       	rjmp	.-36     	; 0xfe <main+0x12>

00000122 <__tablejump2__>:
 122:	ee 0f       	add	r30, r30
 124:	ff 1f       	adc	r31, r31
 126:	05 90       	lpm	r0, Z+
 128:	f4 91       	lpm	r31, Z
 12a:	e0 2d       	mov	r30, r0
 12c:	09 94       	ijmp

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
