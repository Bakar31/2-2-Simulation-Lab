
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000002e2  00000356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001144  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000077f  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008a6  00000000  00000000  00001d73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000023c  00000000  00000000  0000261c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000471  00000000  00000000  00002858  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cb7  00000000  00000000  00002cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00003980  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ee       	ldi	r30, 0xE2	; 226
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <main>
  7a:	0c 94 6f 01 	jmp	0x2de	; 0x2de <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCDMix_4Bit>:
	
	for(i = (5 - field_length); i < 5; i++)
	{
		LCDsendChar(48 + str[i]);
	}	
}
  82:	88 23       	and	r24, r24
  84:	24 f4       	brge	.+8      	; 0x8e <LCDMix_4Bit+0xc>
  86:	95 b3       	in	r25, 0x15	; 21
  88:	90 68       	ori	r25, 0x80	; 128
  8a:	95 bb       	out	0x15, r25	; 21
  8c:	03 c0       	rjmp	.+6      	; 0x94 <LCDMix_4Bit+0x12>
  8e:	95 b3       	in	r25, 0x15	; 21
  90:	9f 77       	andi	r25, 0x7F	; 127
  92:	95 bb       	out	0x15, r25	; 21
  94:	86 ff       	sbrs	r24, 6
  96:	04 c0       	rjmp	.+8      	; 0xa0 <LCDMix_4Bit+0x1e>
  98:	95 b3       	in	r25, 0x15	; 21
  9a:	90 64       	ori	r25, 0x40	; 64
  9c:	95 bb       	out	0x15, r25	; 21
  9e:	03 c0       	rjmp	.+6      	; 0xa6 <LCDMix_4Bit+0x24>
  a0:	95 b3       	in	r25, 0x15	; 21
  a2:	9f 7b       	andi	r25, 0xBF	; 191
  a4:	95 bb       	out	0x15, r25	; 21
  a6:	85 ff       	sbrs	r24, 5
  a8:	04 c0       	rjmp	.+8      	; 0xb2 <LCDMix_4Bit+0x30>
  aa:	95 b3       	in	r25, 0x15	; 21
  ac:	90 62       	ori	r25, 0x20	; 32
  ae:	95 bb       	out	0x15, r25	; 21
  b0:	03 c0       	rjmp	.+6      	; 0xb8 <LCDMix_4Bit+0x36>
  b2:	95 b3       	in	r25, 0x15	; 21
  b4:	9f 7d       	andi	r25, 0xDF	; 223
  b6:	95 bb       	out	0x15, r25	; 21
  b8:	84 ff       	sbrs	r24, 4
  ba:	04 c0       	rjmp	.+8      	; 0xc4 <LCDMix_4Bit+0x42>
  bc:	85 b3       	in	r24, 0x15	; 21
  be:	80 61       	ori	r24, 0x10	; 16
  c0:	85 bb       	out	0x15, r24	; 21
  c2:	08 95       	ret
  c4:	85 b3       	in	r24, 0x15	; 21
  c6:	8f 7e       	andi	r24, 0xEF	; 239
  c8:	85 bb       	out	0x15, r24	; 21
  ca:	08 95       	ret

000000cc <LCDsendChar>:
  cc:	cf 93       	push	r28
  ce:	c8 2f       	mov	r28, r24
  d0:	80 7f       	andi	r24, 0xF0	; 240
  d2:	0e 94 41 00 	call	0x82	; 0x82 <LCDMix_4Bit>
  d6:	82 b3       	in	r24, 0x12	; 18
  d8:	80 61       	ori	r24, 0x10	; 16
  da:	82 bb       	out	0x12, r24	; 18
  dc:	82 b3       	in	r24, 0x12	; 18
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	82 bb       	out	0x12, r24	; 18
  e2:	89 ef       	ldi	r24, 0xF9	; 249
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <LCDsendChar+0x1a>
  ea:	00 c0       	rjmp	.+0      	; 0xec <LCDsendChar+0x20>
  ec:	00 00       	nop
  ee:	82 b3       	in	r24, 0x12	; 18
  f0:	8f 7b       	andi	r24, 0xBF	; 191
  f2:	82 bb       	out	0x12, r24	; 18
  f4:	82 b3       	in	r24, 0x12	; 18
  f6:	8f 7e       	andi	r24, 0xEF	; 239
  f8:	82 bb       	out	0x12, r24	; 18
  fa:	89 ef       	ldi	r24, 0xF9	; 249
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <LCDsendChar+0x32>
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCDsendChar+0x38>
 104:	00 00       	nop
 106:	8c 2f       	mov	r24, r28
 108:	82 95       	swap	r24
 10a:	80 7f       	andi	r24, 0xF0	; 240
 10c:	0e 94 41 00 	call	0x82	; 0x82 <LCDMix_4Bit>
 110:	82 b3       	in	r24, 0x12	; 18
 112:	80 61       	ori	r24, 0x10	; 16
 114:	82 bb       	out	0x12, r24	; 18
 116:	82 b3       	in	r24, 0x12	; 18
 118:	80 64       	ori	r24, 0x40	; 64
 11a:	82 bb       	out	0x12, r24	; 18
 11c:	89 ef       	ldi	r24, 0xF9	; 249
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <LCDsendChar+0x54>
 124:	00 c0       	rjmp	.+0      	; 0x126 <LCDsendChar+0x5a>
 126:	00 00       	nop
 128:	82 b3       	in	r24, 0x12	; 18
 12a:	8f 7b       	andi	r24, 0xBF	; 191
 12c:	82 bb       	out	0x12, r24	; 18
 12e:	82 b3       	in	r24, 0x12	; 18
 130:	8f 7e       	andi	r24, 0xEF	; 239
 132:	82 bb       	out	0x12, r24	; 18
 134:	89 ef       	ldi	r24, 0xF9	; 249
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCDsendChar+0x6c>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCDsendChar+0x72>
 13e:	00 00       	nop
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <LCDsendCommand>:
 144:	cf 93       	push	r28
 146:	c8 2f       	mov	r28, r24
 148:	80 7f       	andi	r24, 0xF0	; 240
 14a:	0e 94 41 00 	call	0x82	; 0x82 <LCDMix_4Bit>
 14e:	82 b3       	in	r24, 0x12	; 18
 150:	80 64       	ori	r24, 0x40	; 64
 152:	82 bb       	out	0x12, r24	; 18
 154:	89 ef       	ldi	r24, 0xF9	; 249
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCDsendCommand+0x14>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <LCDsendCommand+0x1a>
 15e:	00 00       	nop
 160:	82 b3       	in	r24, 0x12	; 18
 162:	8f 7b       	andi	r24, 0xBF	; 191
 164:	82 bb       	out	0x12, r24	; 18
 166:	89 ef       	ldi	r24, 0xF9	; 249
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCDsendCommand+0x26>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCDsendCommand+0x2c>
 170:	00 00       	nop
 172:	8c 2f       	mov	r24, r28
 174:	82 95       	swap	r24
 176:	80 7f       	andi	r24, 0xF0	; 240
 178:	0e 94 41 00 	call	0x82	; 0x82 <LCDMix_4Bit>
 17c:	82 b3       	in	r24, 0x12	; 18
 17e:	80 64       	ori	r24, 0x40	; 64
 180:	82 bb       	out	0x12, r24	; 18
 182:	89 ef       	ldi	r24, 0xF9	; 249
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCDsendCommand+0x42>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCDsendCommand+0x48>
 18c:	00 00       	nop
 18e:	82 b3       	in	r24, 0x12	; 18
 190:	8f 7b       	andi	r24, 0xBF	; 191
 192:	82 bb       	out	0x12, r24	; 18
 194:	89 ef       	ldi	r24, 0xF9	; 249
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCDsendCommand+0x54>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCDsendCommand+0x5a>
 19e:	00 00       	nop
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <LCDinit>:
 1a4:	85 ea       	ldi	r24, 0xA5	; 165
 1a6:	9e e0       	ldi	r25, 0x0E	; 14
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LCDinit+0x4>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <LCDinit+0xa>
 1ae:	00 00       	nop
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	0e 94 41 00 	call	0x82	; 0x82 <LCDMix_4Bit>
 1b6:	82 b3       	in	r24, 0x12	; 18
 1b8:	8f 7e       	andi	r24, 0xEF	; 239
 1ba:	82 bb       	out	0x12, r24	; 18
 1bc:	82 b3       	in	r24, 0x12	; 18
 1be:	8f 7d       	andi	r24, 0xDF	; 223
 1c0:	82 bb       	out	0x12, r24	; 18
 1c2:	82 b3       	in	r24, 0x12	; 18
 1c4:	8f 7b       	andi	r24, 0xBF	; 191
 1c6:	82 bb       	out	0x12, r24	; 18
 1c8:	84 b3       	in	r24, 0x14	; 20
 1ca:	80 61       	ori	r24, 0x10	; 16
 1cc:	84 bb       	out	0x14, r24	; 20
 1ce:	84 b3       	in	r24, 0x14	; 20
 1d0:	80 62       	ori	r24, 0x20	; 32
 1d2:	84 bb       	out	0x14, r24	; 20
 1d4:	84 b3       	in	r24, 0x14	; 20
 1d6:	80 64       	ori	r24, 0x40	; 64
 1d8:	84 bb       	out	0x14, r24	; 20
 1da:	84 b3       	in	r24, 0x14	; 20
 1dc:	80 68       	ori	r24, 0x80	; 128
 1de:	84 bb       	out	0x14, r24	; 20
 1e0:	81 b3       	in	r24, 0x11	; 17
 1e2:	80 61       	ori	r24, 0x10	; 16
 1e4:	81 bb       	out	0x11, r24	; 17
 1e6:	81 b3       	in	r24, 0x11	; 17
 1e8:	80 62       	ori	r24, 0x20	; 32
 1ea:	81 bb       	out	0x11, r24	; 17
 1ec:	81 b3       	in	r24, 0x11	; 17
 1ee:	80 64       	ori	r24, 0x40	; 64
 1f0:	81 bb       	out	0x11, r24	; 17
 1f2:	80 e3       	ldi	r24, 0x30	; 48
 1f4:	0e 94 41 00 	call	0x82	; 0x82 <LCDMix_4Bit>
 1f8:	82 b3       	in	r24, 0x12	; 18
 1fa:	80 64       	ori	r24, 0x40	; 64
 1fc:	82 bb       	out	0x12, r24	; 18
 1fe:	89 ef       	ldi	r24, 0xF9	; 249
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <LCDinit+0x5e>
 206:	00 c0       	rjmp	.+0      	; 0x208 <LCDinit+0x64>
 208:	00 00       	nop
 20a:	82 b3       	in	r24, 0x12	; 18
 20c:	8f 7b       	andi	r24, 0xBF	; 191
 20e:	82 bb       	out	0x12, r24	; 18
 210:	89 ef       	ldi	r24, 0xF9	; 249
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <LCDinit+0x70>
 218:	00 c0       	rjmp	.+0      	; 0x21a <LCDinit+0x76>
 21a:	00 00       	nop
 21c:	80 e3       	ldi	r24, 0x30	; 48
 21e:	0e 94 41 00 	call	0x82	; 0x82 <LCDMix_4Bit>
 222:	82 b3       	in	r24, 0x12	; 18
 224:	80 64       	ori	r24, 0x40	; 64
 226:	82 bb       	out	0x12, r24	; 18
 228:	89 ef       	ldi	r24, 0xF9	; 249
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <LCDinit+0x88>
 230:	00 c0       	rjmp	.+0      	; 0x232 <LCDinit+0x8e>
 232:	00 00       	nop
 234:	82 b3       	in	r24, 0x12	; 18
 236:	8f 7b       	andi	r24, 0xBF	; 191
 238:	82 bb       	out	0x12, r24	; 18
 23a:	89 ef       	ldi	r24, 0xF9	; 249
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <LCDinit+0x9a>
 242:	00 c0       	rjmp	.+0      	; 0x244 <LCDinit+0xa0>
 244:	00 00       	nop
 246:	80 e2       	ldi	r24, 0x20	; 32
 248:	0e 94 41 00 	call	0x82	; 0x82 <LCDMix_4Bit>
 24c:	82 b3       	in	r24, 0x12	; 18
 24e:	80 64       	ori	r24, 0x40	; 64
 250:	82 bb       	out	0x12, r24	; 18
 252:	89 ef       	ldi	r24, 0xF9	; 249
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <LCDinit+0xb2>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <LCDinit+0xb8>
 25c:	00 00       	nop
 25e:	82 b3       	in	r24, 0x12	; 18
 260:	8f 7b       	andi	r24, 0xBF	; 191
 262:	82 bb       	out	0x12, r24	; 18
 264:	89 ef       	ldi	r24, 0xF9	; 249
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <LCDinit+0xc4>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <LCDinit+0xca>
 26e:	00 00       	nop
 270:	88 e2       	ldi	r24, 0x28	; 40
 272:	0e 94 a2 00 	call	0x144	; 0x144 <LCDsendCommand>
 276:	8c e0       	ldi	r24, 0x0C	; 12
 278:	0e 94 a2 00 	call	0x144	; 0x144 <LCDsendCommand>
 27c:	08 95       	ret

0000027e <LCDGotoXY>:
 27e:	62 30       	cpi	r22, 0x02	; 2
 280:	31 f0       	breq	.+12     	; 0x28e <LCDGotoXY+0x10>
 282:	63 30       	cpi	r22, 0x03	; 3
 284:	31 f0       	breq	.+12     	; 0x292 <LCDGotoXY+0x14>
 286:	61 30       	cpi	r22, 0x01	; 1
 288:	29 f4       	brne	.+10     	; 0x294 <LCDGotoXY+0x16>
 28a:	80 5c       	subi	r24, 0xC0	; 192
 28c:	03 c0       	rjmp	.+6      	; 0x294 <LCDGotoXY+0x16>
 28e:	8c 5e       	subi	r24, 0xEC	; 236
 290:	01 c0       	rjmp	.+2      	; 0x294 <LCDGotoXY+0x16>
 292:	8c 5a       	subi	r24, 0xAC	; 172
 294:	80 68       	ori	r24, 0x80	; 128
 296:	0e 94 a2 00 	call	0x144	; 0x144 <LCDsendCommand>
 29a:	08 95       	ret

0000029c <LCDWriteString>:

void LCDWriteString(const char *msg)
{
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	ec 01       	movw	r28, r24
	/*****************************************************************	
	This function Writes a given string to lcd at the current cursor location.
	Arguments:
	msg: a null terminated string to print
	*****************************************************************/
	while(*msg!='\0')
 2a2:	03 c0       	rjmp	.+6      	; 0x2aa <LCDWriteString+0xe>
	{
		LCDsendChar(*msg);
 2a4:	0e 94 66 00 	call	0xcc	; 0xcc <LCDsendChar>
		msg++;
 2a8:	21 96       	adiw	r28, 0x01	; 1
	/*****************************************************************	
	This function Writes a given string to lcd at the current cursor location.
	Arguments:
	msg: a null terminated string to print
	*****************************************************************/
	while(*msg!='\0')
 2aa:	88 81       	ld	r24, Y
 2ac:	81 11       	cpse	r24, r1
 2ae:	fa cf       	rjmp	.-12     	; 0x2a4 <LCDWriteString+0x8>
	{
		LCDsendChar(*msg);
		msg++;
	}
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <main>:
#include "lib/lcd_lib.h"


int main(void) {
	
	DDRD = 0xFF;
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;
 2ba:	84 bb       	out	0x14, r24	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2bc:	87 ea       	ldi	r24, 0xA7	; 167
 2be:	91 e6       	ldi	r25, 0x61	; 97
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <main+0xa>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <main+0x10>
 2c6:	00 00       	nop
	
	// Power up delay to stabilize LCD
	_delay_ms(100);
	LCDinit(); // Initialize LCD, print welcome message
 2c8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCDinit>
	LCDWriteStringXY(2, 0, "Hello World!");
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	82 e0       	ldi	r24, 0x02	; 2
 2d0:	0e 94 3f 01 	call	0x27e	; 0x27e <LCDGotoXY>
 2d4:	80 e6       	ldi	r24, 0x60	; 96
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 4e 01 	call	0x29c	; 0x29c <LCDWriteString>
 2dc:	ff cf       	rjmp	.-2      	; 0x2dc <main+0x26>

000002de <_exit>:
 2de:	f8 94       	cli

000002e0 <__stop_program>:
 2e0:	ff cf       	rjmp	.-2      	; 0x2e0 <__stop_program>
