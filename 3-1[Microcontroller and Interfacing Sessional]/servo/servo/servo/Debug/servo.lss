
servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000158  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000788  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000597  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000308  00000000  00000000  00000f57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001260  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000340  00000000  00000000  00001284  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f8  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000017bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 */ 
#include <avr/io.h>
#include <util/delay.h>
int main(void) {
	
	DDRD |= 0x20;
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 62       	ori	r24, 0x20	; 32
  70:	81 bb       	out	0x11, r24	; 17
	
	ICR1 = 19999;
  72:	8f e1       	ldi	r24, 0x1F	; 31
  74:	9e e4       	ldi	r25, 0x4E	; 78
  76:	97 bd       	out	0x27, r25	; 39
  78:	86 bd       	out	0x26, r24	; 38
	OCR1A = 1200;
  7a:	80 eb       	ldi	r24, 0xB0	; 176
  7c:	94 e0       	ldi	r25, 0x04	; 4
  7e:	9b bd       	out	0x2b, r25	; 43
  80:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
  82:	1d bc       	out	0x2d, r1	; 45
  84:	1c bc       	out	0x2c, r1	; 44
	TCCR1A = 0x82;
  86:	82 e8       	ldi	r24, 0x82	; 130
  88:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0x19;
  8a:	89 e1       	ldi	r24, 0x19	; 25
  8c:	8e bd       	out	0x2e, r24	; 46
	
	
	while (1) {
		

		OCR1A = 600;
  8e:	88 e5       	ldi	r24, 0x58	; 88
  90:	92 e0       	ldi	r25, 0x02	; 2
  92:	9b bd       	out	0x2b, r25	; 43
  94:	8a bd       	out	0x2a, r24	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f e7       	ldi	r18, 0x7F	; 127
  98:	3a e1       	ldi	r19, 0x1A	; 26
  9a:	46 e0       	ldi	r20, 0x06	; 6
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	30 40       	sbci	r19, 0x00	; 0
  a0:	40 40       	sbci	r20, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x30>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x3a>
  a6:	00 00       	nop
		_delay_ms(2000);
		OCR1A = 800;
  a8:	80 e2       	ldi	r24, 0x20	; 32
  aa:	93 e0       	ldi	r25, 0x03	; 3
  ac:	9b bd       	out	0x2b, r25	; 43
  ae:	8a bd       	out	0x2a, r24	; 42
  b0:	5f e7       	ldi	r21, 0x7F	; 127
  b2:	6a e1       	ldi	r22, 0x1A	; 26
  b4:	76 e0       	ldi	r23, 0x06	; 6
  b6:	51 50       	subi	r21, 0x01	; 1
  b8:	60 40       	sbci	r22, 0x00	; 0
  ba:	70 40       	sbci	r23, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x4a>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x54>
  c0:	00 00       	nop
		_delay_ms(2000);
		OCR1A = 1000;
  c2:	28 ee       	ldi	r18, 0xE8	; 232
  c4:	33 e0       	ldi	r19, 0x03	; 3
  c6:	3b bd       	out	0x2b, r19	; 43
  c8:	2a bd       	out	0x2a, r18	; 42
  ca:	ef e7       	ldi	r30, 0x7F	; 127
  cc:	4a e1       	ldi	r20, 0x1A	; 26
  ce:	56 e0       	ldi	r21, 0x06	; 6
  d0:	e1 50       	subi	r30, 0x01	; 1
  d2:	40 40       	sbci	r20, 0x00	; 0
  d4:	50 40       	sbci	r21, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x64>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x6e>
  da:	00 00       	nop
		_delay_ms(2000);
		OCR1A = 1400;
  dc:	48 e7       	ldi	r20, 0x78	; 120
  de:	55 e0       	ldi	r21, 0x05	; 5
  e0:	5b bd       	out	0x2b, r21	; 43
  e2:	4a bd       	out	0x2a, r20	; 42
  e4:	6f e7       	ldi	r22, 0x7F	; 127
  e6:	7a e1       	ldi	r23, 0x1A	; 26
  e8:	e6 e0       	ldi	r30, 0x06	; 6
  ea:	61 50       	subi	r22, 0x01	; 1
  ec:	70 40       	sbci	r23, 0x00	; 0
  ee:	e0 40       	sbci	r30, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x7e>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x88>
  f4:	00 00       	nop
		_delay_ms(2000);
		OCR1A = 1800;
  f6:	68 e0       	ldi	r22, 0x08	; 8
  f8:	77 e0       	ldi	r23, 0x07	; 7
  fa:	7b bd       	out	0x2b, r23	; 43
  fc:	6a bd       	out	0x2a, r22	; 42
  fe:	6f e7       	ldi	r22, 0x7F	; 127
 100:	7a e1       	ldi	r23, 0x1A	; 26
 102:	e6 e0       	ldi	r30, 0x06	; 6
 104:	61 50       	subi	r22, 0x01	; 1
 106:	70 40       	sbci	r23, 0x00	; 0
 108:	e0 40       	sbci	r30, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x98>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0xa2>
 10e:	00 00       	nop
		_delay_ms(2000);
		
		OCR1A = 1400;
 110:	5b bd       	out	0x2b, r21	; 43
 112:	4a bd       	out	0x2a, r20	; 42
 114:	4f e7       	ldi	r20, 0x7F	; 127
 116:	5a e1       	ldi	r21, 0x1A	; 26
 118:	66 e0       	ldi	r22, 0x06	; 6
 11a:	41 50       	subi	r20, 0x01	; 1
 11c:	50 40       	sbci	r21, 0x00	; 0
 11e:	60 40       	sbci	r22, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0xae>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0xb8>
 124:	00 00       	nop
		_delay_ms(2000);
		OCR1A = 1000;
 126:	3b bd       	out	0x2b, r19	; 43
 128:	2a bd       	out	0x2a, r18	; 42
 12a:	7f e7       	ldi	r23, 0x7F	; 127
 12c:	ea e1       	ldi	r30, 0x1A	; 26
 12e:	26 e0       	ldi	r18, 0x06	; 6
 130:	71 50       	subi	r23, 0x01	; 1
 132:	e0 40       	sbci	r30, 0x00	; 0
 134:	20 40       	sbci	r18, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0xc4>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0xce>
 13a:	00 00       	nop
		_delay_ms(2000);
		OCR1A = 800;
 13c:	9b bd       	out	0x2b, r25	; 43
 13e:	8a bd       	out	0x2a, r24	; 42
 140:	3f e7       	ldi	r19, 0x7F	; 127
 142:	4a e1       	ldi	r20, 0x1A	; 26
 144:	56 e0       	ldi	r21, 0x06	; 6
 146:	31 50       	subi	r19, 0x01	; 1
 148:	40 40       	sbci	r20, 0x00	; 0
 14a:	50 40       	sbci	r21, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0xda>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0xe4>
 150:	00 00       	nop
 152:	9d cf       	rjmp	.-198    	; 0x8e <main+0x22>

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
